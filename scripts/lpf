#!/bin/bash
#
# lpf Local Package Building Service wrapper script
#

scriptdir=$( dirname $(readlink -fn $0))
source $scriptdir/lpf-defs.bash


function usage()
{
    cat << EOF
Usage: lpf <command> [args]

commands:
    list 	List all packages.
    update [package]
                Interactive approve, build and install of given package or
                all packages.
    state [package]
                List package state or state of all packages.
    scan [package]
                Triage a given package or all packages  and
                update their status.
    approve <package>
                Approve a package in state approve-wait.
    build [package]
                Build given package or all packages in state
                build-wait
    rebuild <package>
                Force re-install of a package where previous installation
                failed.
    install <package>
                Install rpms for given package.
    log [package]
                Display logs from last build for package, or just
                last build.
    hide <package>
                Hide (i. e., disable) notification messages for given package.

See the manpage for more commands and other info.
EOF
}


function check_pkg_arg()
# check_pkg_arg <pkg>: Check a mandatory package arg, exit on errors.
{
    if [ -z "$1" ]; then
        usage
        exit 1
    fi
    if [ ! -e "$PKG_DATA_DIR/$1" ]; then
        echo "No such package: \"$1\""
        exit 2
    fi
}


function list_packages()
{
    if [ -n "$1" ]; then
       usage
       exit 1
    else
       for pkgdir in $(get_pkgdirs); do
           echo ${pkgdir##*/}
       done
    fi
}


function list_states_cmd()
{
    [ -n "$1" ] && check_pkg_arg "$@"
    list_states "$@"
}


function build_packages_cmd()
{
    [ -n "$1" ] && check_pkg_arg "$@"
    $scriptdir/lpf-build "$@"
}


function rebuild_package()
{
    check_pkg_arg "$@"
    local pkg=$1

    case $( get_state $pkg ) in
        'failed')  $scriptdir/lpf-packbuild 'set-state' $pkg 'build-wait'
                   $scriptdir/lpf-pkgbuild 'build' $pkg
                   ;;
        'not-approved')
                  $scriptdir/lpf-packbuild 'set-state' $pkg 'approve-wait'
                  lpf-approve $pkg && $scriptdir/lpf-pkgbuild 'build' $pkg
                  ;;
        *)        error "Rebuild error" "Illegal state (aborting)" >&2
                  ;;
    esac
}


function scan_packages_cmd()
{
    [ -n "$1" ] && check_pkg_arg "$@"
    scan_packages "$@"
}


function scan_removal_cmd()
{
    check_pkg_arg "$@"
    $scriptdir/lpf-pkgbuild 'set-state' $1 'removing'
    scan_packages_cmd "$1"
}


function approve_package_cmd()
{
    check_pkg_arg "$@"
    approve_package "$@"
}


function install_rpms_cmd()
{
    check_pkg_arg "$@"
    install_rpms "$@"
}


function reset_cmd()
{
    check_pkg_arg "$@"
    $scriptdir/lpf-pkgbuild 'reset' "$1"
    scan_packages "$@"
}


function get_spec_cmd()
{
    check_pkg_arg "$@"
    cp -a $LPF_DATA/packages/$1/*.spec .
    echo $(basename  $LPF_DATA/packages/$1/*.spec)
}


function hide_cmd()
{
    check_pkg_arg "$@"
    sudo -u pkg-build $scriptdir/lpf-pkgbuild 'hide' "$@"
}


function unhide_cmd()
{
    check_pkg_arg "$@"
    sudo -u pkg-build $scriptdir/lpf-pkgbuild 'unhide' "$@"
}


function get_srpm_cmd()
{
    check_pkg_arg "$@"
    sources=$(rpm --eval %_sourcedir)
    cp $LPF_DATA/packages/$1/SOURCES/* $sources 2>/dev/null || :
    spectool -g -C $sources  $LPF_DATA/packages/$1/*.spec
    rpmbuild -bs  --define="_srcrpmdir $PWD" $LPF_DATA/packages/$1/*.spec
}


function update_packages()
{
    [ -n "$1" ] && check_pkg_arg "$@"
    $scriptdir/lpf-update "$@"
}


if [ -z "$1" -o "$1" = '-h' ]; then
    usage
    exit 1
fi

export SUDO_ASKPASS=$scriptdir/sudo_askpass
id -Gn | grep -q $LPF_GROUP  || {
    if [ "$EUID" != "0" ]; then
       $scriptdir/lpf-add-group || exit 1
    fi
}

if [ "$( id -gn )" !=  "$LPF_GROUP" ]; then
    exec sg pkg-build "$0 $*"
fi

trap "do_trap 81" SIGINT ERR

# http://forums.gentoo.org/viewtopic-t-947211-start-0.html
export NO_AT_BRIDGE=0

export SUDO_ASKPASS=$scriptdir/sudo_askpass

command=$1
shift
case $command in
    set-state)
            $scriptdir/lpf-pkgbuild 'set-state' $1 $2
            ;;
    list)   list_packages "$@"
            ;;
    state)  list_states_cmd "$@"
            ;;
    build)  build_packages_cmd "$@"
            do_trap 0
            ;;
    rebuild)
            rebuild_package "$@"
            do_trap 0
            ;;
    scan)   scan_packages_cmd "$@"
            ;;
    approve)
            approve_package_cmd "$@"
            do_trap 0
            ;;
    update) update_packages "$@"
            ;;
    install)
            install_rpms_cmd "$@"
            do_trap 0
            ;;
    reset)  reset_cmd "$@"
            ;;
    log)    show_buildlog "$@"
            do_trap 0
            ;;
    spec)   get_spec_cmd "$@"
            ;;
    srpm)   get_srpm_cmd "$@"
            ;;
    hide)   hide_cmd "$@"
            ;;
    unhide) unhide_cmd "$@"
            ;;
    notify) $scriptdir/lpf-notify 'cli-notify' "$@"
            ;;
    scan-removal)
            scan_removal_cmd "$@"
            ;;
    *)      usage
            exit 1
esac


# vim: set expandtab ts=4 sw=4:
